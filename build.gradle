plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.github.ben-manes.versions' version '0.49.0'
	id 'eclipse'
	id 'idea'
	id 'java'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id 'com.github.spotbugs' version '5.2.1'
    id 'info.solidsoft.pitest' version '1.15.0'
    id "org.sonarqube" version "4.4.1.3373"
	id "com.github.pivotalservices.cf-app" version "2.3.0-rc.8"
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

spotbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
    showProgress = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

group = 'io.pivotal'
version = '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17


repositories {
	mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
    maven { url "https://jitpack.io" }
}

configurations {
	runtimeAgent
}

dependencyManagement {
	imports {
		mavenBom "com.microsoft.azure:azure-spring-boot-bom:2.3.5"
	}
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
	doFirst {
		// Ensure that all of the agents we need to load at run-time happen when running the app through
		// Gradle
		configurations.runtimeAgent.each {
			File jarFile ->
				jvmArgs "-javaagent:${jarFile.absolutePath}"
		}
    }
}

test {
	doFirst {
		// Ensure that all of the agents we need to load at run-time happen when running the app through
		// Gradle
		configurations.runtimeAgent.each {
			File jarFile ->
				jvmArgs "-javaagent:${jarFile.absolutePath}"
		}
    }
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
	toolVersion = "0.8.11"
}

pitest {
    testPlugin = "junit5"
    jvmArgs = ['-Xmx1024m']
    threads = 5
    targetClasses = ['io.pivotal.cfapp.*']
    outputFormats = ['XML', 'HTML']
}

jar {
	excludes = ['**/application.yml']
}

sonarqube {
    properties {
        property "sonar.projectName", "Track Shipments"
        property "sonar.projectKey", "io.pivotal:track-shipments"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

cfConfig {
	//CF Details
	ccHost = "api.local.pcfdev.io"
	ccUser = "admin"
	ccPassword = "admin"
	org = "pcfdev-org"
	space = "pcfdev-space"

	//App Details
	name = "track-shipments"
	host = "track-shipments"
	filePath = "${buildDir}/libs/track-shipments-${version}.jar"
	path = ""
	domain = "local.pcfdev.io"
	instances = 1
	memory = 1024

	//Env and services
	buildpack = "https://github.com/cloudfoundry/java-buildpack"
	environment = ["JAVA_OPTS": "-Djava.security.egd=file:/dev/./urandom", "SPRING_PROFILES_ACTIVE": "cloud"]
}

dependencies {
	// Required top-level dependency to support AOP and the AspectJ Transformer in Spring, even
    // when using Load-Time Weaving (LTW).
    implementation "org.springframework.boot:spring-boot-starter-aop"
	implementation 'com.microsoft.azure:azure-spring-boot'
	implementation 'com.microsoft.sqlserver:mssql-jdbc:12.4.2.jre11'
	implementation 'org.apache.commons:commons-lang3:3.13.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation ('org.springframework.boot:spring-boot-starter-data-jpa') {
		exclude group: 'org.hibernate', module: 'hibernate-core'
		exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
	}
	implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:4.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.uuid:java-uuid-generator:4.3.0'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.pitest:pitest-junit5-plugin:1.2.1'

	// BEGIN: Required for LTW to work when the application is run via the "test" or bootRun" Gradle
    //        tasks.
    runtimeAgent "org.springframework:spring-instrument"
    // END
}

project.tasks.withType(JavaCompile) {
    options.fork = true
    options.compilerArgs << '-parameters'
}
