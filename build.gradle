buildscript {
	ext {
		azureVersion = '2.0.4'
		gitPropertiesPluginVersion = '2.0.0'
		sonarqubePluginVersion = '2.7'
		springBootVersion = '2.1.4.RELEASE'
		cfAppVersion = '2.3.0-rc.2'
	}
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/releases" }
		maven { url "https://repo.spring.io/release" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "http://clojars.org/repo/" }
	}
	dependencies {
      	classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubePluginVersion}")
		classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gitPropertiesPluginVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.github.pivotalservices:ya-cf-app-gradle-plugin:${cfAppVersion}")
	}
}


apply plugin: 'cf-app'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

group = 'io.pivotal'
version = '1.0-SNAPSHOT'


gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
	reports {
	    xml.enabled = true
	    html.enabled = true
	    csv.enabled = false
    }
}

check.dependsOn jacocoTestReport

jar {
	baseName 'track-shipments'
	excludes = ['**/application.yml']
}

sonarqube {
    properties {
        property "sonar.projectName", "Track Shipments"
        property "sonar.projectKey", "io.pivotal:track-shipments"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

repositories {
	mavenCentral()
	maven { url "http://clojars.org/repo/" }
}

project.tasks.withType(JavaCompile) {
    options.fork = true
    options.compilerArgs << '-parameters'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

configurations {
	all {
    	exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
	}
    instrument { 
        description 'classpath for instrument as java agent' 
    }
}

cfConfig {
	//CF Details
	ccHost = "api.local.pcfdev.io"
	ccUser = "admin"
	ccPassword = "admin"
	org = "pcfdev-org"
	space = "pcfdev-space"

	//App Details
	name = "track-shipments"
	host = "track-shipments"
	filePath = "${buildDir}/libs/track-shipments-${version}-exec.jar"
	path = ""
	domain = "local.pcfdev.io"
	instances = 1
	memory = 1024

	//Env and services
	buildpack = "https://github.com/cloudfoundry/java-buildpack"
	environment = ["JAVA_OPTS": "-Djava.security.egd=file:/dev/./urandom", "SPRING_PROFILES_ACTIVE": "cloud"]
}

dependencyManagement {
	imports {
		mavenBom "com.microsoft.azure:azure-spring-boot-bom:${azureVersion}"
	}
}

dependencies {
	compile('com.microsoft.azure:azure-spring-boot')
	compile('com.microsoft.sqlserver:sqljdbc4:4.0')
	compile('org.apache.commons:commons-lang3:3.9')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa') { exclude module: 'hibernate-core' }
	compile('org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.4')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.data:spring-data-rest-hal-browser')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-log4j2')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.uuid:java-uuid-generator:3.2.0')
	compile('com.google.guava:guava:25.1-jre')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
	runtime('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.3')
	instrument('org.springframework:spring-instrument:5.1.6.RELEASE')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

test { 
    jvmArgs "-javaagent:$project.configurations.instrument.singleFile"
}



bootRun {
    jvmArgs "-javaagent:$project.configurations.instrument.singleFile"
    systemProperties = System.properties
}

task copySpringInstrumentJar (type:Copy) {
    description = 'Copies the spring-instrument.jar into your lib directory.'
    outputs.file project.file('lib/spring-instrument.jar')
    from (project.configurations.instrument)
    into("lib")
    rename { String filename -> filename = 'spring-instrument.jar' }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
    
bootJar.enabled = true
jar.enabled = false

tasks.idea.dependsOn(project.tasks.copySpringInstrumentJar)
tasks.eclipse.dependsOn(project.tasks.copySpringInstrumentJar)
tasks.processResources.dependsOn(project.tasks.copySpringInstrumentJar)
